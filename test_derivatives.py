"""
–¢–ï–°–¢–û–í–´–ô –§–ê–ô–õ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö
–≠—Ç–æ—Ç —Ñ–∞–π–ª –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
"""

import sympy as sp
from main import DerivativeCalculator  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–∑ main.py

def run_all_tests():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö
    """
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê –ü–†–û–ò–ó–í–û–î–ù–´–•")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    calc = DerivativeCalculator()
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ
    print("\n1. –¢–ï–°–¢–ò–†–£–ï–ú –ü–†–û–°–¢–´–ï –ü–†–û–ò–ó–í–û–î–ù–´–ï:")
    print("-" * 40)
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤: (—Ñ—É–Ω–∫—Ü–∏—è, –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –ø–æ—Ä—è–¥–æ–∫, –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
    test_cases = [
        # (—Ñ—É–Ω–∫—Ü–∏—è, –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –ø–æ—Ä—è–¥–æ–∫, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è)
        ("x**2", "x", 1, "2*x"),           # –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è x¬≤ = 2x
        ("x**3", "x", 2, "6*x"),           # –í—Ç–æ—Ä–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è x¬≥ = 6x
        ("sin(x)", "x", 1, "cos(x)"),      # –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è sin(x) = cos(x)
        ("cos(x)", "x", 1, "-sin(x)"),     # –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è cos(x) = -sin(x)
        ("exp(x)", "x", 1, "exp(x)"),      # –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è e^x = e^x
        ("log(x)", "x", 1, "1/x"),         # –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è ln(x) = 1/x
    ]
    
    passed_tests = 0  # –°—á–µ—Ç—á–∏–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    total_tests = 0   # –û–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤
    
    for i, (func, var, order, expected) in enumerate(test_cases, 1):
        total_tests += 1
        print(f"\n–¢–µ—Å—Ç {i}: d({func})/d{var}^{order}")
        print(f"–û–∂–∏–¥–∞–µ–º: {expected}")
        
        # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        original, derivative, simplified = calc.calculate_simple_derivative(func, var, order)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–∏–º–≤–æ–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        expected_expr = sp.sympify(expected)
        
        # –ü–†–û–í–ï–†–Ø–ï–ú –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ï –†–ê–í–ï–ù–°–¢–í–û, –∞ –Ω–µ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        # sp.simplify(expr1 - expr2) == 0 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–≤–Ω—ã
        difference = sp.simplify(simplified - expected_expr)
        
        if difference == 0:
            print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù")
            passed_tests += 1
        else:
            print(f"‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
            print(f"   –ü–æ–ª—É—á–∏–ª–∏: {simplified}")
            print(f"   –†–∞–∑–Ω–æ—Å—Ç—å: {difference}")
    
    # –¢–µ—Å—Ç 2: –°–º–µ—à–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ
    print("\n\n2. –¢–ï–°–¢–ò–†–£–ï–ú –°–ú–ï–®–ê–ù–ù–´–ï –ü–†–û–ò–ó–í–û–î–ù–´–ï:")
    print("-" * 40)
    
    mixed_test_cases = [
        # (—Ñ—É–Ω–∫—Ü–∏—è, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –ø–æ—Ä—è–¥–∫–∏, –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        ("x**2 * y**3", ["x", "y"], [1, 1], "6*x*y**2"),  # ‚àÇ¬≤/‚àÇx‚àÇy (x¬≤y¬≥) = 6xy¬≤
        ("x*y + y**2", ["x", "y"], [1, 1], "1"),          # ‚àÇ¬≤/‚àÇx‚àÇy (xy + y¬≤) = 1
        ("x**3 * y**2", ["x", "y"], [2, 1], "12*x*y"),    # ‚àÇ¬≥/‚àÇx¬≤‚àÇy (x¬≥y¬≤) = 12xy
    ]
    
    for i, (func, vars, orders, expected) in enumerate(mixed_test_cases, 1):
        total_tests += 1
        print(f"\n–¢–µ—Å—Ç {i}: —Å–º–µ—à–∞–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è {func}")
        print(f"–ü–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º: {vars} —Å –ø–æ—Ä—è–¥–∫–∞–º–∏: {orders}")
        print(f"–û–∂–∏–¥–∞–µ–º: {expected}")
        
        # –í—ã–∑—ã–≤–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö
        original, steps, result = calc.calculate_mixed_derivative(func, vars, orders)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        expected_expr = sp.sympify(expected)
        
        # –ü–†–û–í–ï–†–Ø–ï–ú –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ï –†–ê–í–ï–ù–°–¢–í–û
        difference = sp.simplify(result - expected_expr)
        
        if difference == 0:
            print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù")
            passed_tests += 1
        else:
            print(f"‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
            print(f"   –ü–æ–ª—É—á–∏–ª–∏: {result}")
            print(f"   –†–∞–∑–Ω–æ—Å—Ç—å: {difference}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞
            print(f"   –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞: -sin(y)*cos(x) –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–≤–Ω–æ -sin(x)*sin(y)")
    
    # –¢–µ—Å—Ç 3: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤ —Ç–æ—á–∫–∞—Ö
    print("\n\n3. –¢–ï–°–¢–ò–†–£–ï–ú –í–´–ß–ò–°–õ–ï–ù–ò–ï –í –¢–û–ß–ö–ê–•:")
    print("-" * 40)
    
    total_tests += 1
    # –ë–µ—Ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é x¬≤ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 2x)
    original, derivative, simplified = calc.calculate_simple_derivative("x**2", "x", 1)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤ —Ç–æ—á–∫–µ x=3 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2*3 = 6)
    print("–¢–µ—Å—Ç: –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π x¬≤ –≤ —Ç–æ—á–∫–µ x=3")
    value = calc.evaluate_at_point(simplified, {'x': 3})
    
    # –î–ª—è —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    if value == 6:
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: 2*3 = 6")
        passed_tests += 1
    else:
        print(f"‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –ø–æ–ª—É—á–∏–ª–∏ {value}, –æ–∂–∏–¥–∞–ª–∏ 6")
    
    # –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n" + "=" * 60)
    print(f"–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests} –∏–∑ {total_tests}")
    
    if passed_tests == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –º–æ–≥—É—Ç –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∏–∑-–∑–∞ —Ä–∞–∑–Ω–æ–≥–æ")
        print("–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –≤ sympy")
    
    print("=" * 60)

# –≠—Ç–æ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    run_all_tests()