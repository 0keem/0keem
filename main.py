import sympy as sp

class DerivativeCalculator:
    """
    –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ–±—ã—á–Ω—ã—Ö –∏ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö
    """
    
    def __init__(self):
        # –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö x, y, z
        # –°–∏–º–≤–æ–ª—ã - —ç—Ç–æ –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å
        self.x = sp.Symbol('x')
        self.y = sp.Symbol('y')
        self.z = sp.Symbol('z')
    
    def calculate_simple_derivative(self, expression, variable='x', order=1):
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—ã—á–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–∏ –æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            expression - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "x**2 + 3*x")
            variable - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±–µ—Ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é ('x', 'y' –∏–ª–∏ 'z')
            order - –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π (1 - –ø–µ—Ä–≤–∞—è, 2 - –≤—Ç–æ—Ä–∞—è –∏ —Ç.–¥.)
        """
        print(f"\n=== –í—ã—á–∏—Å–ª–µ–Ω–∏–µ {order}-–π –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π –ø–æ {variable} ===")
        print(f"–§—É–Ω–∫—Ü–∏—è: f({variable}) = {expression}")
        
        try:
            # –®–∞–≥ 1: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            # sympify –ø–æ–Ω–∏–º–∞–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫
            math_expr = sp.sympify(expression)
            print(f"‚úì –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {math_expr}")
            
            # –®–∞–≥ 2: –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è
            if variable == 'x':
                var = self.x
            elif variable == 'y':
                var = self.y
            else:
                var = self.z
            
            # –®–∞–≥ 3: –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é
            # diff –≤—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é: –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç - –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, 
            # –≤—Ç–æ—Ä–æ–π - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, —Ç—Ä–µ—Ç–∏–π - –ø–æ—Ä—è–¥–æ–∫
            derivative = sp.diff(math_expr, var, order)
            print(f"‚úì –í—ã—á–∏—Å–ª–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è: {derivative}")
            
            # –®–∞–≥ 4: –£–ø—Ä–æ—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
            simplified = sp.simplify(derivative)
            print(f"‚úì –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞: {simplified}")
            
            return math_expr, derivative, simplified
            
        except Exception as error:
            print(f"‚úó –û—à–∏–±–∫–∞: {error}")
            return None, None, None
    
    def calculate_mixed_derivative(self, expression, variables, orders):
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Å–º–µ—à–∞–Ω–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            expression - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "x**2 * y**3")
            variables - —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ['x', 'y'] 
            orders - —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—è–¥–∫–æ–≤ [1, 2] (–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –ø–æ x 1-–≥–æ –ø–æ—Ä—è–¥–∫–∞, –ø–æ y 2-–≥–æ –ø–æ—Ä—è–¥–∫–∞)
        """
        print(f"\n=== –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–º–µ—à–∞–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π ===")
        print(f"–§—É–Ω–∫—Ü–∏—è: f({', '.join(variables)}) = {expression}")
        print(f"–ü–æ—Ä—è–¥–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö: {list(zip(variables, orders))}")
        
        try:
            # –®–∞–≥ 1: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            math_expr = sp.sympify(expression)
            print(f"‚úì –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {math_expr}")
            
            # –®–∞–≥ 2: –ù–∞—á–∏–Ω–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            current_expr = math_expr
            steps = []  # –ë—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —à–∞–≥–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
            
            # –®–∞–≥ 3: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            for i, (var_name, order) in enumerate(zip(variables, orders)):
                # –í—ã–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                if var_name == 'x':
                    var = self.x
                elif var_name == 'y':
                    var = self.y
                else:
                    var = self.z
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é –Ω—É–∂–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
                current_expr = sp.diff(current_expr, var, order)
                
                # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —à–∞–≥
                step_desc = f"‚àÇ^{order}f/‚àÇ{var_name}^{order}"
                steps.append((step_desc, current_expr))
                print(f"‚úì –®–∞–≥ {i+1}: {step_desc} = {current_expr}")
            
            # –®–∞–≥ 4: –£–ø—Ä–æ—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            final_result = sp.simplify(current_expr)
            print(f"‚úì –§–∏–Ω–∞–ª—å–Ω—ã–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {final_result}")
            
            return math_expr, steps, final_result
            
        except Exception as error:
            print(f"‚úó –û—à–∏–±–∫–∞: {error}")
            return None, [], None
    
    def evaluate_at_point(self, expression, point_values):
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ
        
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            expression - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            point_values - —Å–ª–æ–≤–∞—Ä—å —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö {'x': 2, 'y': 3}
        """
        print(f"\n--- –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–æ—á–∫–µ {point_values} ---")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏: {—Å–∏–º–≤–æ–ª: –∑–Ω–∞—á–µ–Ω–∏–µ}
            substitutions = {}
            if 'x' in point_values:
                substitutions[self.x] = point_values['x']
            if 'y' in point_values:
                substitutions[self.y] = point_values['y']
            if 'z' in point_values:
                substitutions[self.z] = point_values['z']
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤—ã—á–∏—Å–ª—è–µ–º
            value = expression.subs(substitutions)
            print(f"‚úì –í—ã—Ä–∞–∂–µ–Ω–∏–µ: {expression}")
            print(f"‚úì –ü–æ—Å–ª–µ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ {point_values}: {value}")
            
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —á–∏—Å–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if value.is_number:
                print(f"‚úì –ß–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {float(value):.4f}")
            
            return value
            
        except Exception as error:
            print(f"‚úó –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {error}")
            return None

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    calculator = DerivativeCalculator()
    
    print("üéØ –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ü–†–û–ò–ó–í–û–î–ù–´–•")
    print("=" * 50)
    
    # –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    examples = [
        {"type": "simple", "func": "x**2 + 3*x + 5", "var": "x", "order": 1, "desc": "–ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"},
        {"type": "simple", "func": "sin(x)", "var": "x", "order": 1, "desc": "–°–∏–Ω—É—Å"},
        {"type": "mixed", "func": "x**2 * y**3", "vars": ["x", "y"], "orders": [1, 1], "desc": "–°–º–µ—à–∞–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è x¬≤y¬≥"},
        {"type": "mixed", "func": "sin(x)*cos(y)", "vars": ["x", "y"], "orders": [1, 1], "desc": "–°–º–µ—à–∞–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è sin(x)cos(y)"},
    ]
    
    while True:
        print("\n" + "="*50)
        print("–í–´–ë–ï–†–ò–¢–ï –î–ï–ô–°–¢–í–ò–ï:")
        print("1 - –í—ã—á–∏—Å–ª–∏—Ç—å –æ–±—ã—á–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é")
        print("2 - –í—ã—á–∏—Å–ª–∏—Ç—å —Å–º–µ—à–∞–Ω–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é")
        print("3 - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã")
        print("4 - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
        
        if choice == '1':
            # –†–µ–∂–∏–º –æ–±—ã—á–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π
            print("\n--- –û–ë–´–ß–ù–ê–Ø –ü–†–û–ò–ó–í–û–î–ù–ê–Ø ---")
            expression = input("–í–≤–µ–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, x**2 + sin(x)): ").strip()
            variable = input("–ü–æ –∫–∞–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä—É–µ–º? (x/y/z, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é x): ").strip()
            if not variable:
                variable = 'x'
            
            try:
                order = int(input("–ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π (1, 2, 3...): ").strip() or "1")
            except:
                order = 1
                print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—è–¥–æ–∫ 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é
            original, derivative, simplified = calculator.calculate_simple_derivative(
                expression, variable, order
            )
            
            # –ï—Å–ª–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–æ—á–∫–µ
            if original is not None:
                calc_point = input("–í—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–æ—á–∫–µ? (y/n): ").strip().lower()
                if calc_point == 'y':
                    try:
                        point_val = float(input(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ {variable} = ").strip())
                        calculator.evaluate_at_point(simplified, {variable: point_val})
                    except:
                        print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ—á–∫–∏")
        
        elif choice == '2':
            # –†–µ–∂–∏–º —Å–º–µ—à–∞–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π
            print("\n--- –°–ú–ï–®–ê–ù–ù–ê–Ø –ü–†–û–ò–ó–í–û–î–ù–ê–Ø ---")
            expression = input("–í–≤–µ–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, x**2 * y**3): ").strip()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            vars_input = input("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, x,y): ").strip()
            variables = [v.strip() for v in vars_input.split(',') if v.strip()]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—è–¥–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö
            orders = []
            print("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π:")
            for var in variables:
                try:
                    order = int(input(f"–ü–æ—Ä—è–¥–æ–∫ –¥–ª—è {var}: ").strip() or "1")
                    orders.append(order)
                except:
                    orders.append(1)
                    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—è–¥–æ–∫ 1 –¥–ª—è {var}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—à–∞–Ω–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é
            original, steps, result = calculator.calculate_mixed_derivative(
                expression, variables, orders
            )
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–æ—á–∫–µ
            if original is not None:
                calc_point = input("–í—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–æ—á–∫–µ? (y/n): ").strip().lower()
                if calc_point == 'y':
                    point_vals = {}
                    for var in variables:
                        try:
                            val = float(input(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ {var} = ").strip())
                            point_vals[var] = val
                        except:
                            print(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {var}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    if point_vals:
                        calculator.evaluate_at_point(result, point_vals)
        
        elif choice == '3':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            print("\n--- –ü–†–ò–ú–ï–†–´ ---")
            for i, example in enumerate(examples, 1):
                print(f"\n{i}. {example['desc']}")
                if example['type'] == 'simple':
                    original, derivative, simplified = calculator.calculate_simple_derivative(
                        example['func'], example['var'], example['order']
                    )
                else:
                    original, steps, result = calculator.calculate_mixed_derivative(
                        example['func'], example['vars'], example['orders']
                    )
        
        elif choice == '4':
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
            break
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
if __name__ == "__main__":
    main()